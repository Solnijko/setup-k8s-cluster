- hosts: masters
  become: yes
  tasks:
    # CA cert and key
    - name: Generate private key for CA
      shell: |
        openssl genrsa -out ca.key 2048
    
    - name: Generate CSR using the private key
      shell: |
        openssl req -new -key ca.key -subj "/CN=KUBERNETES-CA/O=Kubernetes" -out ca.csr
    
    - name: Self sign the csr using its own private key
      shell: |
        openssl x509 -req -in ca.csr -signkey ca.key -CAcreateserial  -out ca.crt -days 1000
    
    # Admin cert and key
    - name: Generate private key for admin user
      shell: |
        openssl genrsa -out admin.key 2048
    
    - name: Generate CSR for admin user.
      shell: |
        openssl req -new -key admin.key -subj "/CN=admin/O=system:masters" -out admin.csr

    - name: Sign certificate for admin user using CA servers private ke
      shell: |
        openssl x509 -req -in admin.csr -CA ca.crt -CAkey ca.key -CAcreateserial  -out admin.crt -days 1000
   
    # Controller manager cert and key
    - name: Generate private key for CM
      shell: |
        openssl genrsa -out kube-controller-manager.key 2048
    
    - name: Generate CSR for CM
      shell: |
        openssl req -new -key kube-controller-manager.key \
          -subj "/CN=system:kube-controller-manager/O=system:kube-controller-manager" -out kube-controller-manager.csr

    - name: Sign certificate for CM
      shell: |
        openssl x509 -req -in kube-controller-manager.csr \
          -CA ca.crt -CAkey ca.key -CAcreateserial -out kube-controller-manager.crt -days 1000   
    
    # Kube-proxy client cert and key
    - name: Generate key for kube-proxy client
      shell: |
        openssl genrsa -out kube-proxy.key 2048
    
    - name: Generate CSR for kube-proxy client
      shell: |
        openssl req -new -key kube-proxy.key \
          -subj "/CN=system:kube-proxy/O=system:node-proxier" -out kube-proxy.csr
  
    - name: Sign certificate for kube-proxy client
      shell: |
        openssl x509 -req -in kube-proxy.csr \
          -CA ca.crt -CAkey ca.key -CAcreateserial  -out kube-proxy.crt -days 1000
    
    # Scheduler client cert and key
    - name: Generate key for kube-scheduler client
      shell: |
        openssl genrsa -out kube-scheduler.key 2048
    
    - name: Generate CSR for kube-scheduler
      shell: |
        openssl req -new -key kube-scheduler.key \
          -subj "/CN=system:kube-scheduler/O=system:kube-scheduler" -out kube-scheduler.csr
    
    - name: Sign certificate for kube-scheduler
      shell: |
        openssl x509 -req -in kube-scheduler.csr -CA ca.crt -CAkey ca.key -CAcreateserial  -out kube-scheduler.crt -days 1000
    
    # Kubernetes API server cert and key
    # The openssl command cannot take alternate names as command line parameter.
    # So .conf file should be created
    - name: Create .conf file for API server
      copy:
        content: |
          [req]
          req_extensions = v3_req
          distinguished_name = req_distinguished_name
          [req_distinguished_name]
          [v3_req]
          basicConstraints = critical, CA:FALSE
          keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
          extendedKeyUsage = serverAuth
          subjectAltName = @alt_names
          [alt_names]
          DNS.1 = kubernetes
          DNS.2 = kubernetes.default
          DNS.3 = kubernetes.default.svc
          DNS.4 = kubernetes.default.svc.cluster
          DNS.5 = kubernetes.default.svc.cluster.local
          IP.1 = 172.16.10.1
          IP.2 = 10.0.2.4
          IP.3 = 10.0.2.10
          IP.4 = 127.0.0.1
        dest: openssl.cnf

    - name: Generate key for kube-apiserver
      shell: |
        openssl genrsa -out kube-apiserver.key 2048
    
    - name: Generate CSR for kube-apiserver
      shell: |
        openssl req -new -key kube-apiserver.key \
          -subj "/CN=kube-apiserver/O=Kubernetes" -out kube-apiserver.csr -config openssl.cnf

    - name: Sign certificate for kube-apiserver
      shell: |
        openssl x509 -req -in kube-apiserver.csr \
          -CA ca.crt -CAkey ca.key -CAcreateserial  -out kube-apiserver.crt -extensions v3_req -extfile openssl.cnf -days 1000

    # Kubelet client key and sert
    - name: Create .conf file for kubelet client
      copy:
        content: |
          [req]
          req_extensions = v3_req
          distinguished_name = req_distinguished_name
          [req_distinguished_name]
          [v3_req]
          basicConstraints = critical, CA:FALSE
          keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
          extendedKeyUsage = clientAuth
        dest: openssl-kubelet.cnf
    
    - name: Generate key for kubelet client
      shell: |
        openssl genrsa -out apiserver-kubelet-client.key 2048
    
    - name: Generate CSR for kubelet client
      shell: |
        openssl req -new -key apiserver-kubelet-client.key \
          -subj "/CN=kube-apiserver-kubelet-client/O=system:masters" -out apiserver-kubelet-client.csr -config openssl-kubelet.cnf

    - name: Sign certificate for kubelet client
      shell: |
        openssl x509 -req -in apiserver-kubelet-client.csr \
          -CA ca.crt -CAkey ca.key -CAcreateserial  -out apiserver-kubelet-client.crt -extensions v3_req -extfile openssl-kubelet.cnf -days 1000
    
    # ETCD Server key and cert
    - name: Create .conf file for ETCD server
      copy:
        content: |
          [req]
          req_extensions = v3_req
          distinguished_name = req_distinguished_name
          [req_distinguished_name]
          [ v3_req ]
          basicConstraints = CA:FALSE
          keyUsage = nonRepudiation, digitalSignature, keyEncipherment
          subjectAltName = @alt_names
          [alt_names]
          IP.1 = 10.0.2.4
          IP.2 = 127.0.0.1
        dest: openssl-etcd.cnf
    
    - name: Generate key for ETCD server
      shell: |
        openssl genrsa -out etcd-server.key 2048
    
    - name: Generate CSR for ETCD server
      shell: |
        openssl req -new -key etcd-server.key \
          -subj "/CN=etcd-server/O=Kubernetes" -out etcd-server.csr -config openssl-etcd.cnf

    - name: Sign certificate for ETCD server
      shell: |
        openssl x509 -req -in etcd-server.csr \
          -CA ca.crt -CAkey ca.key -CAcreateserial  -out etcd-server.crt -extensions v3_req -extfile openssl-etcd.cnf -days 1000

    # Service Account key and cert
    - name: Generate key for service account
      shell: |
         openssl genrsa -out service-account.key 2048
    
    - name: Generate CSR for service account
      shell: |
        openssl req -new -key service-account.key \
          -subj "/CN=service-accounts/O=Kubernetes" -out service-account.csr

    - name: Sign certificate for service account
      shell: |
        openssl x509 -req -in service-account.csr \
          -CA ca.crt -CAkey ca.key -CAcreateserial  -out service-account.crt -days 1000
    